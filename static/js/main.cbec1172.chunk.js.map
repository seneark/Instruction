{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Home","props","Registered","bind","state","Register","this","setState","style","display","flexDirection","justifyContent","textAlign","color","marginBottom","width","margin","left","cascade","right","delay","href","Button","variant","onClick","target","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cbec1172.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport Zoom from 'react-reveal/Zoom';\nimport Button from \"@material-ui/core/Button\";\nimport {Link} from 'react-router-dom';\nimport Flip from 'react-reveal/Zoom';\nimport \"react-notifications/lib/notifications.css\";\n\nclass Home extends Component {\n    constructor(props) {\n        super(props);\n        this.Registered = this.Registered.bind(this);\n        this.state = {\n            Register: false,\n        }\n    }\n\n    Registered() {\n        this.setState({Register: true});\n    }\n\n    render() {\n        return (\n            <div style={{\n                display: 'flex',\n                flexDirection: \"column\",\n                justifyContent: \"center\",\n                textAlign: \"center\",\n                color:\"White\",\n                marginBottom:50\n            }}>\n                <div style={{\n                    width: \"80vw\",\n                    margin: \"auto\"\n                }}>\n                    <h1>Instructions: (Read Them Carefully</h1>\n                    <h3>\n                        <Zoom left cascade>\n                            <div style={{display: 'inline-block'}}>\n                                1. Programming language&nbsp;\n                            </div>\n                        </Zoom><Zoom right cascade>\n                        <div style={{display: 'inline-block'}}>to be used is C++.</div>\n                    </Zoom>\n                    </h3>\n                    <h3>\n                        <Zoom delay={1000} left cascade>\n                            <div style={{display: 'inline-block'}}>\n                                2. All the answers should be&nbsp;\n                            </div>\n\n                        </Zoom><Zoom delay={1000} right cascade>\n                        <div style={{display: 'inline-block'}}>\n                            entered in lower case without any space or special characters.\n                        </div>\n                    </Zoom>\n                    </h3>\n                    <h3>\n                        <Zoom delay={2000} left cascade>\n                            <div style={{display: 'inline-block'}}>\n                                3.All participants need to fill a google form before&nbsp;\n                            </div>\n\n                        </Zoom><Zoom delay={2000} right cascade>\n                        <div style={{display: 'inline-block'}}>\n                            starting any round else submission will not be considered.\n                        </div>\n                    </Zoom>\n                    </h3>\n                    {/*4*/}\n                    <h3>\n                        <Zoom delay={3000} left cascade>\n                            <div style={{display: 'inline-block'}}>\n                                4.In order to move to next round, participants&nbsp;\n                            </div>\n\n                        </Zoom><Zoom delay={3000} right cascade>\n                        <div style={{display: 'inline-block'}}>\n                            need to solve all the rounds prior to it.\n                        </div>\n                    </Zoom>\n                    </h3>\n                    {/*5*/}\n                    <h3>\n                        <Zoom delay={4000} left cascade>\n                            <div style={{display: 'inline-block'}}>\n                                5.In case participants want to quit at a particular round,&nbsp;\n                            </div>\n\n                        </Zoom><Zoom delay={4000} right cascade>\n                        <div style={{display: 'inline-block'}}>\n                            they need to fill a google form before quitting.\n                        </div>\n                    </Zoom>\n                    </h3>\n                    {/*6*/}\n                    <h3>\n                        <Zoom delay={5000} left cascade>\n                            <div style={{display: 'inline-block'}}>\n                                6.Participants will be judged on the basis of total rounds&nbsp;\n                            </div>\n\n                        </Zoom><Zoom delay={5000} right cascade>\n                        <div style={{display: 'inline-block'}}>\n                            cleared and total time taken for all the rounds.\n                        </div>\n                    </Zoom>\n                    </h3>\n                    {/*7*/}\n                    <h3>\n                        <Zoom delay={6000} left cascade>\n                            <div style={{display: 'inline-block'}}>\n                                7. After solving all the rounds, participants need to fill&nbsp;\n                            </div>\n\n                        </Zoom><Zoom delay={6000} right cascade>\n                        <div style={{display: 'inline-block'}}>\n                            the form in order to get their participation recorded.\n                        </div>\n                    </Zoom>\n                    </h3>\n                    {/*8*/}\n                    <h3>\n                        <Zoom delay={7000} left cascade>\n                            <div style={{display: 'inline-block'}}>\n                                8.Results will be announced on 1st September 2020&nbsp;\n                            </div>\n\n                        </Zoom><Zoom delay={7000} right cascade>\n                        <div style={{display: 'inline-block'}}>\n                            on D_CODER LINKEDIN and INSTAGRAM handle.\n                        </div>\n                    </Zoom>\n                    </h3>\n                    {/* 9 */}\n                    <h3 style={{color:\"#f50057\"}}>\n                        <Zoom delay={8000} left cascade>\n                            <div style={{display: 'inline-block'}}>\n                                9.Register on Google Form&nbsp;\n                            </div>\n\n                        </Zoom><Zoom delay={8000} right cascade>\n                        <div style={{display: 'inline-block'}}>\n                            First before doing anything else.\n                        </div>\n                    </Zoom>\n                    </h3>\n                    <br/>\n                    <br/>\n                    <Flip delay={7000}>\n                        {this.state.Register?\n                          <a href={\"https://seneark.github.io/RoUNd1HaCk/\"}>\n                            <Button\n                                variant=\"outlined\"\n                                color=\"secondary\"\n                            >\n                                Go to First Round\n                            </Button>\n                            </a>:\n                            <Button\n                                variant=\"outlined\"\n                                color=\"secondary\"\n                                onClick={this.Registered}\n                                href={\"https://forms.gle/s6Hqv2pJwLb7MKNc9\"}\n                                target=\"_blank\"\n                            >\n                                Register at Google Form\n                            </Button>\n                        }\n                    </Flip>\n                </div>\n                <br/>\n                <br/>\n                <br/>\n                <br/>\n            </div>\n        );\n    }\n}\n\nexport default Home;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}